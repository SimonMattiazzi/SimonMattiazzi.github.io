"""
This is a Python code used to run a DDM experiment, where a sample is placed
in an electromagnet, which generates an external magnetic field.
For every external field magnitude, a DDM experiment is carried out. 
The field is measured with a Hall probe.

Voltage on the probe is measured with Keithley 2700, controlled by visa.

The current through the electromagnet is generated by GW Instek GPP-4323,
controlled directly by serial communication.

Instek GPP-4323 has to be set into remote operation mode by 
System - Interface - USB - 9600.

If a crash occurs, GW Instek has to be unlocked and its cable reconnected manually.

Parts of this code will be put inside Run CDDM code.

"""
import matplotlib.pyplot as plt
import serial
import datetime
import serial.tools.list_ports
import time
import os
import numpy as np
import pyvisa as visa
from GH.labtools.labtools.keithley.controller import KeithleyController
from GH.labtools.labtools.GWInstek.GPP4323 import GWInstekController
from scipy.optimize import curve_fit
#import pyTENMA


# set GW Instek port and channel and Keithley VISA address
FOLDER0 = "D:/Users Data/Simon/other tests/test5"

if not os.path.exists(os.path.join(FOLDER0, "results")): # create results folder in the first run
    os.makedirs(os.path.join(FOLDER0,"results"))
FOLDER = os.path.join(FOLDER0, "results")

timestamp = str(datetime.datetime.now()).replace(":", ".")[:-7]
PORT = 'COM3'  # device manager
RESOURCE_INDEX = 0 # visa resource index for Keithley
CHANNEL = 1

VOLTAGE = 20  # voltage set on current generator
current_array_ratio = [0, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 1.5, 1, 0.75, 0.5, 0.3, 0.1, 0, 0.1, 0.3, 0.5, 0.75, 1, 1.5, 2, 1.5, 1, 0.75, 0.5, 0.3, 0.1, 0]
current_array = [0.01, 0.02, 0.03, 0.04, 0.05] # approx -1A - +1A za 30 mT,
actual_current_array = []
probe_voltage_array = []

   

def device_list():
    """
    Returns a list of potential COM ports and VISA resources.

    Returns:
    coms (list): List of potential COM ports.
    vres (list): List of potential VISA resources.
    """
    print("Scanning system for serial devices...")
    coms, vres = [], [] 
    for potentialPort in list(serial.tools.list_ports.comports()):
            print(" --",potentialPort.description)
            coms.append(potentialPort.device)
    if len(coms)==0:
        print("ERROR: I don't see any serial devices I can use.")
    else:
        print(" -- devices you could use:",coms)
    rm0 = visa.ResourceManager()
    print("Scanning system for VISA resources ...")
    for i, res in enumerate(rm0.list_resources()):
        vres.append(res)
        print(" -- " + res + " (resource index " + str(i) + ") ")
    return coms, vres
  
    
def run():
    """
    Runs the experiment.

    This function initializes the GWInstekController and KeithleyController, sets up the necessary parameters,
    performs the measurements, and saves the results.
    """
    print("Staring RUN ... \n")
    GW = GWInstekController(PORT)
    k = KeithleyController()
    k.init(resource_index=RESOURCE_INDEX)
    time.sleep(0.5)
    print(k.info)
    GW.idn()
    GW.beeper_off()
    time.sleep(0.5)
    GW.set_voltage(channel=CHANNEL, voltage=VOLTAGE)  # constant throughout the experiment #30?
    GW.enable_output(channel=CHANNEL)
    time.sleep(1)
    
    for current in current_array:
        
        # SET CURRENT THROUGH ELECTROMAGNET AND MEASURE EXACT VALUE:
        GW.set_current(channel=CHANNEL, current=current)
        time.sleep(1)
        print("Current set to: ", GW.get_current(channel=CHANNEL) * 1000, "mA")
        actual_current_array.append(GW.get_current(channel=CHANNEL) * 1000)
        time.sleep(1)
        
        # MEASURE FIELD WITH HALL PROBE:
        time_, voltage = k.measure() # measure one by averaging 10 samples
        # measure voltage ...
        print("Measured Hall probe voltage: ", voltage)
        probe_voltage_array.append(voltage*1000)
        time.sleep(1)
        
        # DO A DDM MEASUREMENT:
        #time.sleep(10)
        
    GW.set_voltage(channel=CHANNEL, voltage=0)
    GW.set_current(channel=CHANNEL, current=0)
    GW.disable_output(channel=CHANNEL)
    time.sleep(1)
    GW.close()
    k.close()


def magnetic_field(hall_voltage_V, ratio=1.27):
    """
    Convert the Hall probe output voltage to magnetic field strength.
    
    Parameters:
    - hall_voltage_V (float): Hall probe output voltage in volts.
    - ratio (float): Ratio between side and middle measurements (default: 1.27).
    
    Returns:
    - Magnetic field strength in millitesla (mT).
    """
    magnetic_field = (64/2) * (hall_voltage_V - 2.5) / ratio
    return magnetic_field
    

def hysteresis(array):
    """
   Perform a hysteresis experiment.

   Parameters:
   - array (list): Array from 0 to max field (in Amperes!). The other parts are generated here.

   Returns:
   - actual_current_hyst (list): Array of the current values that were actually set.
   - probe_voltage_hyst (list): Array of probe voltages.
   """
    
    
    array = np.array(array)
    array = np.concatenate((array, np.flip(array), - array, np.flip(-array)))
    array = list(array)
    actual_current_hyst = []
    probe_voltage_hyst = []
    factor, count = 1, 0
    
    print(array)
    #print(a)
    
    print("Staring hysteresis experiment ...")
    GW = GWInstekController(PORT)
    k = KeithleyController()
    k.init(resource_index=0)
    time.sleep(0.5)
    print(k.info)
    GW.idn()
    GW.beeper_off()
    time.sleep(0.5)
    GW.set_voltage(channel=CHANNEL, voltage=20)  # constant throughout the experiment #30?
    GW.enable_output(channel=CHANNEL)
    time.sleep(1)
    
    for j, current in enumerate(array):
        
        if j != 0 and current == 0 and count == 0:
            GW.set_current(channel=CHANNEL, current=0)
            time.sleep(1)
            input("CHANGE POLARITY! Then press enter in console twice to continue")
            time.sleep(1)
            count += 1
            factor = -1
            
        current *= factor
        
        # SET CURRENT THROUGH ELECTROMAGNET AND MEASURE EXACT VALUE:
        GW.set_current(channel=CHANNEL, current=current)
        time.sleep(1)
        print("Current set to: ", GW.get_current(channel=CHANNEL) * 1000, "mA")
        actual_current_hyst.append(GW.get_current(channel=CHANNEL) * 1000)
        time.sleep(1)
        
        # MEASURE
        time_, voltage = k.measure() # measure one by averaging 10 samples
        # measure voltage ...
        print("Measured Hall probe voltage (side): ", voltage)
        probe_voltage_hyst.append(voltage*1000)
        time.sleep(1)
        
        
    GW.set_voltage(channel=CHANNEL, voltage=0)
    GW.set_current(channel=CHANNEL, current=0)# constant throughout the experiment #30?
    GW.disable_output(channel=CHANNEL)
    time.sleep(1)
    GW.close()
    k.close()
    
    print("Saving hyst files ...")
    np.save((FOLDER + "/current_array_hyst" + str(timestamp) + ".npy"), np.array(actual_current_hyst))
    np.save((FOLDER + "/probe_voltage_hyst" + str(timestamp) + ".npy"), np.array(probe_voltage_hyst))
    
    np.savetxt((FOLDER + "/hysteresis results" + str(timestamp) + ".txt"),
               np.transpose([np.array(actual_current_hyst),
                             np.array(probe_voltage_hyst)]),
               delimiter = ",",
               header="EM current [mA]\tProbeVoltageSide [mV]")
    
    print("Files saved.")
    
    return actual_current_hyst, probe_voltage_hyst


def ratio():
    '''
    Run the experiment to measure the ratio between probe readouts
    when it is placed in the middle of the magnets
    and at the side.

    '''
    
    actual_current_ratio = []
    probe_voltage_side = []
    probe_voltage_middle = [] 
    
    print("Staring ratio experiment ...")
    GW = GWInstekController(PORT)
    k = KeithleyController()
    k.init(resource_index=0)
    time.sleep(0.5)
    print(k.info)
    GW.idn()
    GW.beeper_off()
    time.sleep(0.5)
    GW.set_voltage(channel=CHANNEL, voltage=20)  # constant throughout the experiment #30?
    GW.enable_output(channel=CHANNEL)
    time.sleep(1)
    
    for j, current in enumerate(current_array_ratio):
        
        if j != 0 and current == 0:
            GW.set_current(channel=CHANNEL, current=0)
            print("CHANGE POLARITY")
            time.sleep(20)
        
        # SET CURRENT THROUGH ELECTROMAGNET AND MEASURE EXACT VALUE:
        GW.set_current(channel=CHANNEL, current=current)
        time.sleep(1)
        print("Current set to: ", GW.get_current(channel=CHANNEL) * 1000, "mA")
        actual_current_ratio.append(GW.get_current(channel=CHANNEL) * 1000)
        time.sleep(1)
        
        # MEASURE on the side:
        print("Side measurement in 10 seconds")
        time.sleep(8)
        print("Side measurement in 2 seconds")
        time.sleep(2)
        time_, voltage = k.measure() # measure one by averaging 10 samples
        # measure voltage ...
        print("Measured Hall probe voltage (side): ", voltage)
        probe_voltage_side.append(voltage*1000)
        time.sleep(1)
        
        # measure in the middle
        print("Middle measurement in 10 seconds")
        time.sleep(8)
        print("Middle measurement in 2 seconds")
        time.sleep(2)
        time_, voltage = k.measure() # measure one by averaging 10 samples
        # measure voltage ...
        print("Measured Hall probe voltage (middle): ", voltage)
        probe_voltage_middle.append(voltage*1000)
        time.sleep(1)
        
    GW.set_voltage(channel=CHANNEL, voltage=0)
    GW.set_current(channel=CHANNEL, current=0)# constant throughout the experiment #30?
    GW.disable_output(channel=CHANNEL)
    time.sleep(1)
    GW.close()
    k.close()
    
    print("Saving ratio files ...")
    np.save((FOLDER + "/current_array_ratio" + str(timestamp) + ".npy"), np.array(actual_current_ratio))
    np.save((FOLDER + "/probe_voltage_side" + str(timestamp) + ".npy"), np.array(probe_voltage_side))
    np.save((FOLDER + "/probe_voltage_middle" + str(timestamp) + ".npy"), np.array(probe_voltage_middle))
    
    np.savetxt((FOLDER + "/probe ratio results" + str(timestamp) + ".txt"),
               np.transpose([np.array(actual_current_ratio),
                             np.array(probe_voltage_side),
                             np.array(probe_voltage_middle)]),
               delimiter = ",",
               header="EM current [mA]\tProbeVoltageSide [mV]\tProbeVoltageMiddle [mV]")
    
    print("Files saved.")
    

def plot_hyst(x, y):
    """
    Plot the hysteresis curve.

    Parameters:
    - x (list or array): x-values (current EM in mA).
    - y (list or array): y-values (Hall probe voltage in mV).
    """
    fig, (ax) = plt.subplots(1,1)
    fig.set_dpi(150)
    ax.plot(x, y)
    ax.grid()
    ax.minorticks_on()
    fig.suptitle("Hysteresis")
    ax.set_xlabel("Current EM (mA)")
    ax.set_ylabel("Hall probe voltage (mV)")
    plt.show()
    

def plot_ratio():
    """Plot the Hall probe ratio experiment results."""
    x = np.load(FOLDER + "/current_array_ratio" + str(timestamp) + ".npy")
    y1 = np.load(FOLDER + "/probe_voltage_side" + str(timestamp) + ".npy")
    y2 = np.load(FOLDER + "/probe_voltage_middle" + str(timestamp) + ".npy")

    count, factor = 0, 1
    for i, xi in enumerate(x):
        if xi == 0 and i != 0 and count == 0:
            count += 1
            factor = -1
        x[i] = xi * factor
        
    def fit_func(x, k, n):
        return k * x + n

    popt, pcov = curve_fit(fit_func, x, (y2-2500)/(y1-2500))
    print(popt)
        
    fig, (ax1, ax2) = plt.subplots(2,1, figsize=(9, 6))
    fig.set_dpi(300)
    ax2.grid()
    ax2.minorticks_on()
    fig.suptitle("Hall probe ratio")
    ax2.set_xlabel("current EM (mA)")
    ax2.set_ylabel("ratio side/middle probe")

    ax1.grid()
    ax1.minorticks_on()
    ax1.set_ylabel("Hall probe voltage")
    
    
    ax2.scatter(x, (y2-2500)/(y1-2500), marker="o")
    ax2.plot(x, fit_func(x, *popt), c="black", linestyle="--", label = f"fit, n = {round(popt[1],3)}")
    ax1.plot(x, -y1, label="Side")
    ax1.plot(x, -y2, label="Middle")
    ax1.legend()
    ax2.legend()
    plt.show()


def save_files():
    """Save the experiment data to files."""
    print("Saving files ...")
    np.save((FOLDER+"/current_array_"+ str(timestamp) +".npy"), np.array(actual_current_array))
    np.save((FOLDER+"/voltage_array_"+ str(timestamp) +".npy"), np.array(probe_voltage_array))
    np.savetxt((FOLDER+"/DDM_results_Hall_" + str(timestamp) + ".txt"),
               np.transpose([np.array(actual_current_array),
                             np.array(probe_voltage_array)]),
               delimiter = ",",
               header="EM current [mA]\tProbeVoltage [mV]")
    print("Files saved.")


def testGW():
    """Test the GWInstek."""
    print("Start GWInstek test")
    time.sleep(1)
    GW = GWInstekController(PORT)
    GW.idn()
    time.sleep(2)
    GW.set_voltage(channel=CHANNEL, voltage=1)  # constant throughout the experiment #30?
    GW.set_current(channel=CHANNEL, current=0.005) 
    GW.enable_output(channel=CHANNEL)
    time.sleep(2)
    print("Current set to: ", GW.get_current(channel=CHANNEL) * 1000, "mA")
    time.sleep(1)
    GW.close()


def testKeithley():
    """Test the Keithley."""
    print("Start Keithley test")
    k = KeithleyController()
    k.init(resource_index=RESOURCE_INDEX)
    print(k.info)
    time.sleep(1)
    time_, voltage = k.measure() #measure one by averaging 10 samples
    print("voltage: ", voltage)
    k.close()
    

print("Starting ...")

device_list()
testGW()
testKeithley()
#run()
#save_files()
# hysteresis([0,0.01,0.02,0.03,0.04,0.05,0.06])

print("Finished.")





















# def read(serial):   # returns:  b'GW INSTEK,GPD-3303S,SN:\xff\xff\xff\xff\xff\xff\xff\xff,V1.05\r' 
#     data = b''
#     while True:
#         s = serial.read()
#         data = data + s
#         if s == b'\r':  # \r = 'carriage return'
#             break
#     return data



# class GWInstekController(object):
    
#     def __init__(self, PORT=PORT0):
#         self._serial = serial.Serial(port = PORT, baudrate=9600, timeout = 1)
        
#     def idn(self):
#         self._serial.write(b'*IDN?\n')
#         response = self._serial.readline()
#         print(response)
        
#     def beeper_off(self):
#         self._serial.write(b'BEEP0\n')

#     def beeper_on(self):
#         self._serial.write(b'BEEP1\n')

#     def disable_output_all(self):
#         self._serial.write(b'OUT0\n')
        
#     def enable_output(self, channel):
#         self._serial.write(b':OUTP%i 1\n' % (channel))
        
#     def disable_output(self, channel):
#         self._serial.write(b':OUTP%i 0\n' % (channel))
    
#     def set_current(self, channel, current):
#         self._serial.write(b'ISET%i:%f\n' % (channel, current))
#         #self._serial.write('OUT1\n')
    
#     def get_current(self, channel):
#         self._serial.write(b'IOUT%i?\n' % channel)
#         return float(self._serial.readline()[0:6])
#         #return float(read(self._serial)[0:5])

#     def set_voltage(self, channel, voltage):
#         self._serial.write(b'VSET%i:%f\n' % (channel, voltage))
#         #self._serial.write('OUT1\n')
    
#     def get_voltage(self, channel):
#         self._serial.write(b'VOUT%i?\n' % channel)
#         #print(float(self._serial.readline()[0:6]))
#         return float(self._serial.readline()[0:6])

#     def close(self):
#         self.disable_output_all()
#         self._serial.close()



